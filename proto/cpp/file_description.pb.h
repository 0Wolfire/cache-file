// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_description.proto

#ifndef PROTOBUF_INCLUDED_file_5fdescription_2eproto
#define PROTOBUF_INCLUDED_file_5fdescription_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fdescription_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fdescription_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_file_5fdescription_2eproto();
namespace description {
class Description;
class DescriptionDefaultTypeInternal;
extern DescriptionDefaultTypeInternal _Description_default_instance_;
}  // namespace description
namespace google {
namespace protobuf {
template<> ::description::Description* Arena::CreateMaybeMessage<::description::Description>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace description {

// ===================================================================

class Description :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:description.Description) */ {
 public:
  Description();
  virtual ~Description();

  Description(const Description& from);

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Description(Description&& from) noexcept
    : Description() {
    *this = ::std::move(from);
  }

  inline Description& operator=(Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Description& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Description* internal_default_instance() {
    return reinterpret_cast<const Description*>(
               &_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Description* other);
  friend void swap(Description& a, Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Description* New() const final {
    return CreateMaybeMessage<Description>(nullptr);
  }

  Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Description>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string headers = 1;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 1;
  const ::std::string& headers(int index) const;
  ::std::string* mutable_headers(int index);
  void set_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_headers(int index, ::std::string&& value);
  #endif
  void set_headers(int index, const char* value);
  void set_headers(int index, const char* value, size_t size);
  ::std::string* add_headers();
  void add_headers(const ::std::string& value);
  #if LANG_CXX11
  void add_headers(::std::string&& value);
  #endif
  void add_headers(const char* value);
  void add_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& headers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_headers();

  // string content_hash = 2;
  void clear_content_hash();
  static const int kContentHashFieldNumber = 2;
  const ::std::string& content_hash() const;
  void set_content_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_content_hash(::std::string&& value);
  #endif
  void set_content_hash(const char* value);
  void set_content_hash(const char* value, size_t size);
  ::std::string* mutable_content_hash();
  ::std::string* release_content_hash();
  void set_allocated_content_hash(::std::string* content_hash);

  // string uri = 3;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:description.Description)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> headers_;
  ::google::protobuf::internal::ArenaStringPtr content_hash_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fdescription_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Description

// repeated string headers = 1;
inline int Description::headers_size() const {
  return headers_.size();
}
inline void Description::clear_headers() {
  headers_.Clear();
}
inline const ::std::string& Description::headers(int index) const {
  // @@protoc_insertion_point(field_get:description.Description.headers)
  return headers_.Get(index);
}
inline ::std::string* Description::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:description.Description.headers)
  return headers_.Mutable(index);
}
inline void Description::set_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:description.Description.headers)
  headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Description::set_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:description.Description.headers)
  headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Description::set_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:description.Description.headers)
}
inline void Description::set_headers(int index, const char* value, size_t size) {
  headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:description.Description.headers)
}
inline ::std::string* Description::add_headers() {
  // @@protoc_insertion_point(field_add_mutable:description.Description.headers)
  return headers_.Add();
}
inline void Description::add_headers(const ::std::string& value) {
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:description.Description.headers)
}
#if LANG_CXX11
inline void Description::add_headers(::std::string&& value) {
  headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:description.Description.headers)
}
#endif
inline void Description::add_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:description.Description.headers)
}
inline void Description::add_headers(const char* value, size_t size) {
  headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:description.Description.headers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Description::headers() const {
  // @@protoc_insertion_point(field_list:description.Description.headers)
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Description::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:description.Description.headers)
  return &headers_;
}

// string content_hash = 2;
inline void Description::clear_content_hash() {
  content_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Description::content_hash() const {
  // @@protoc_insertion_point(field_get:description.Description.content_hash)
  return content_hash_.GetNoArena();
}
inline void Description::set_content_hash(const ::std::string& value) {
  
  content_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:description.Description.content_hash)
}
#if LANG_CXX11
inline void Description::set_content_hash(::std::string&& value) {
  
  content_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:description.Description.content_hash)
}
#endif
inline void Description::set_content_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:description.Description.content_hash)
}
inline void Description::set_content_hash(const char* value, size_t size) {
  
  content_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:description.Description.content_hash)
}
inline ::std::string* Description::mutable_content_hash() {
  
  // @@protoc_insertion_point(field_mutable:description.Description.content_hash)
  return content_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_content_hash() {
  // @@protoc_insertion_point(field_release:description.Description.content_hash)
  
  return content_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_allocated_content_hash(::std::string* content_hash) {
  if (content_hash != nullptr) {
    
  } else {
    
  }
  content_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_hash);
  // @@protoc_insertion_point(field_set_allocated:description.Description.content_hash)
}

// string uri = 3;
inline void Description::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Description::uri() const {
  // @@protoc_insertion_point(field_get:description.Description.uri)
  return uri_.GetNoArena();
}
inline void Description::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:description.Description.uri)
}
#if LANG_CXX11
inline void Description::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:description.Description.uri)
}
#endif
inline void Description::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:description.Description.uri)
}
inline void Description::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:description.Description.uri)
}
inline ::std::string* Description::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:description.Description.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_uri() {
  // @@protoc_insertion_point(field_release:description.Description.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_allocated_uri(::std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:description.Description.uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace description

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_file_5fdescription_2eproto
